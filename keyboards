#!/bin/sh

VENDOR="biocoderh"
TARGET="$2"

QMK_HOME="$PWD/qmk_firmware"
QMK_FIRMWARE="$PWD/qmk_firmware"
QMK_USERSPACE="$QMK_FIRMWARE/users"
QMK_KEYBOARDS="$QMK_FIRMWARE/keyboards/$VENDOR"

QMK_KB="$VENDOR/$TARGET"
QMK_KM="$3"

SPLIT_SIDE=
QMK_EE_HANDS=

usage() {
    cat <<EOF
Usage: keyboards [<command>] [<keyboard>] [<keymap>]

Commands:
    update              update git submodules (qmk_firmware)

    lint <keyboard> [<keymap>]                          lint specified firmware
    compile <keyboard> [<keymap>]                       compile specified firmware
    flash <keyboard> [<keymap>] [--left|--right]        flash specified firmware, eeprom left/right available (only for 'caterina', 'atmel-dfu')
EOF
}

update() {
    if ! [ -x "$(command -v git)" ]; then
        echo "git is not installed."
        exit 1
    fi

    git submodule update --init --recursive
}

symlink() {
    [ -n "$MSYSTEM" ] && export MSYS=winsymlinks:nativestrict

    [ "$(readlink -f "$2")" = "$1" ] && return 0

    if [ -d "$2" ]; then
        echo "$2 already exists, can't create symlink to $1"
        exit 1
    fi

    ln -s "$1" "$2"
    return $?
}

qmk_check() {
    symlink "$PWD/keymap" "$QMK_USERSPACE/$VENDOR"

    if [ -z "$TARGET" ]; then
        echo "error: <keyboard> not specified."
        usage
        exit 1
    fi

    if [ ! -f "$PWD/$TARGET/info.json" ]; then
        echo "error: keyboard $QMK_KB not found."
        exit 1
    fi

    mkdir -p "$QMK_KEYBOARDS"
    symlink "$PWD/$TARGET" "$QMK_KEYBOARDS/$TARGET"

    if [ -z "$QMK_KM" ] || [ "$QMK_KM" = "--$SPLIT_SIDE" ]; then
        QMK_KM="$VENDOR"
        echo "Using $QMK_KM keymap."
    fi

    if [ ! -d "$PWD/$TARGET/keymaps/$QMK_KM" ]; then
        echo "error: keymap $QMK_KM not found."
        exit 1
    fi

    if ! [ -x "$(command -v qmk)" ]; then
        echo "qmk is not installed."
        echo "Follow setup instructions by link: https://docs.qmk.fm/#/newbs_getting_started"
        exit 1
    fi

    [ ! -d "$PWD/qmk_firmware" ] && update

    # Handedness by EEPROM
    if [ -n "$SPLIT_SIDE" ]; then
        if grep -q -x -F '#define EE_HANDS' "$PWD/$TARGET/config.h"; then
            if grep -q -F '"bootloader": "caterina",' "$PWD/$TARGET/info.json"; then
                QMK_EE_HANDS="avrdude-split-$SPLIT_SIDE"
            elif grep -q -F '"bootloader": "atmel-dfu",' "$PWD/$TARGET/info.json"; then
                QMK_EE_HANDS="dfu-split-$SPLIT_SIDE"
            fi
        fi
    fi
}

qmk_env() {
    echo QMK_HOME="$QMK_HOME" QMK_FIRMWARE="$QMK_FIRMWARE" qmk $@
    QMK_HOME="$QMK_HOME" QMK_FIRMWARE="$QMK_FIRMWARE" qmk $@
}

qmk_cmd() {
    qmk_env "$1" -kb "$QMK_KB" -km "$QMK_KM" "$2"
}

qmk_lint() {
    qmk_cmd lint --strict
}

qmk_compile() {
    qmk_cmd compile
}

qmk_flash() {
    OPTS=""
    #FILE="$QMK_HOME/.build/${QMK_KB//\//\_}_$QMK_KM.hex"

    if [ -n "$QMK_EE_HANDS" ]; then
        OPTS="-bl $QMK_EE_HANDS"
    #elif [ -f "$FILE" ]; then
        #OPTS="-b $FILE"
    fi

    qmk_cmd flash "$OPTS"
}


case $@ in
    *"--left"*)
        SPLIT_SIDE="left"
        ;;
    *"--right"*)
        SPLIT_SIDE="right"
        ;;
esac

case $1 in
    update)
        update
        exit
        ;;
    lint)
        qmk_check
        qmk_lint
        ;;
    compile)
        qmk_check
        qmk_compile
        ;;
    flash)
        qmk_check
        qmk_flash
        ;;
    *)
        usage
        exit
        ;;
esac
